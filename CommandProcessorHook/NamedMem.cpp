#include "stdafx.h"
#include "NamedMem.h"
#include "AutoLock.h"


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
CNamedMem<T>::CNamedMem()
{
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
CNamedMem<T>::CNamedMem(LPCTSTR szName, DWORD dwSize, BOOL bCreate)
{
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
CNamedMem<T>::~CNamedMem()
{
	if (m_pMapped != NULL)
		UnmapViewOfFile(m_pMapped);
	if (m_hView != NULL)
		CloseHandle(m_hView);
	if (m_hLock != NULL)
		CloseHandle(m_hLock);
	if (m_hRequest != NULL)
		CloseHandle(m_hRequest);
	if (m_hRespond != NULL)
		CloseHandle(m_hRespond);
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
VOID CNamedMem<T>::Create(LPCTSTR szName, DWORD dwSize, LPCTSTR szUser)
{
	return VOID();
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
VOID CNamedMem<T>::Open(LPCTSTR szName)
{
	return VOID();
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
VOID CNamedMem<T>::LockMemory(VOID)
{
	return VOID();
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
VOID CNamedMem<T>::ReleaseMemory(VOID)
{
	return VOID();
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
VOID CNamedMem<T>::SetRequest(VOID)
{
	return VOID();
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
VOID CNamedMem<T>::SetRespond(VOID)
{
	return VOID();
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
HANDLE CNamedMem<T>::GetRequest(VOID) const
{
	return HANDLE();
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
HANDLE CNamedMem<T>::GetRespond(VOID) const
{
	return HANDLE();
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
T * CNamedMem<T>::Get(VOID) const
{
	return nullptr;
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
T & CNamedMem<T>::operator[](size_t index) const
{
	// TODO: insert return statement here
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
T * CNamedMem<T>::operator->(VOID) const
{
	return nullptr;
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
T & CNamedMem<T>::operator*(VOID) const
{
	// TODO: insert return statement here
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
CNamedMem & CNamedMem<T>::operator=(const T & value)
{
	// TODO: insert return statement here
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

template<typename T>
VOID CNamedMem<T>::InitSyncObjects(const SECURITY_ATTRIBUTES * sa, LPCTSTR lpszName)
{
	return VOID();
}



